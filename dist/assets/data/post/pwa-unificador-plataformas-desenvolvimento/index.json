{"hash":"43584b191d37fb8c482c76cc28afd12fbea1769b","data":{"post":{"title":"Progressive Web App, o unificador de plataformas de desenvolvimento","date":"28/08/2020","content":"<h2 id=\"resumo\"><a href=\"#resumo\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Resumo</h2>\n<p>O recente avanço da web móvel permitiu recursos que anteriormente eram encontrados apenas em aplicativos desenvolvidos nativamente. Assim, foi necessário um desenvolvimento árduo para várias plataformas ou usando abordagens multiplataforma. O romance abordagem, denominada Progressive Web Apps, pode ser implementada através de um conjunto de conceitos e tecnologias em qualquer site que atende a determinados requisitos.</p>\n<p>Palavras-chave: Aplicativos, Web, Navegadores, Tecnologia da Informação.</p>\n<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Introdução</h2>\n<p>Neste artigo, defendemos os aplicativos da web progressivos como uma ferramenta possivelmente unificadora\ntecnologia para aplicativos da web e aplicativos nativos.</p>\n<p>No desenvolvimento de aplicativos móveis tradicionais, a reutilização de código entre aplicativos nativos e web é inexistente. Isso ocorre devido ao código não interoperável dos aplicativos nativos bases, resultando em projetos separados, vários ambientes de desenvolvedor e diferentes sistemas operacionais.</p>\n<p>De acordo com Heitkotter et al, existem várias abordagens para o desenvolvimento de multiplataforma. Além disso, há uma infinidade de recursos e documentos técnicos com estruturas para apoiar esse desenvolvimento.\nOs exemplos de estruturas populares incluem Ionic Framework, PhoneGap, React Native e Xamarin. Coincidentemente essas estruturas representam três abordagens tecnologicamente distintas.</p>\n<p>Diante desses fatos, enquanto a indústria mostra investimento e interesse nesse assunto, destaca-se a falta de pesquisa acadêmica sobre o tema. Desse modo, torna-se evidente que ainda há muitos desafios para o desenvolvimento de aplicativos da web progressivos. Com isso, o presente artigo enaltece alguns dos principais tópicos que englobam esse assunto.</p>\n<h2 id=\"conceitos\"><a href=\"#conceitos\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Conceitos</h2>\n<h3 id=\"manifesto\"><a href=\"#manifesto\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Manifesto</h3>\n<p>O objetivo do arquivo manifesto é expor certas configurações modificáveis, como caminho da imagem do logotipo, nome do aplicativo, splash tela e muito mais. Em suma, o manifesto pode ser usado para modificar o comportamento e o estilo dos aplicativos PWA. Para validar esse manifesto, pode ser utilizada a ferramenta manifest-validator.appspot.com, que utiliza a especificação W3C.</p>\n<h3 id=\"agnóstico-de-framework\"><a href=\"#agn%C3%B3stico-de-framework\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Agnóstico de framework</h3>\n<p>Existe uma infinidade de frameworks para desenvolvimento web. Entretanto A Google Web Fundamentals demonstrou ser agnóstica ao uso de um determinado, pois realizou a implementação em três diferentes frameworks.</p>\n<h3 id=\"shell-do-aplicativo\"><a href=\"#shell-do-aplicativo\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Shell do aplicativo</h3>\n<p>O shell do aplicativo é definido pelo Google como:</p>\n<blockquote>\n<p>(...) o mínimo de HTML, CSS, e JavaScript alimentando uma interface de usuário.\nE destacam três critérios para o shell: rápido tempo de carregamento, cache, e exibição de conteúdo dinâmico.</p>\n</blockquote>\n<h3 id=\"service-workers\"><a href=\"#service-workers\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Service Workers</h3>\n<p>Os services workers é responsável pela maior parte do núcleo recursos associados a aplicativos da web progressivos. Um PWA não pode funcionar corretamente em navegadores sem suporte do Service Worker. Ele é registrado na primeira visita de página de um usuário. Consiste em um Arquivo JavaScript que incorpora ganchos de ciclo de vida para negócios lógica e controle de cache. Pode ser usado para lidar com tarefas como sincronização em segundo plano, bem como interceptação de requisições pelo intermédio da rede. </p>\n<p>Se o arquivo do service worker for mais velho que 24 horas, Chrome sempre irá na rede e buscará uma versão nova do arquivo do service worker. Isso é para garantir que os desenvolvedores não implementem acidentalmente um arquivo de service worker \"quebrado\" ou com bugs que fica preso no navegador para sempre</p>\n<h3 id=\"segurança-com-https\"><a href=\"#seguran%C3%A7a-com-https\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Segurança com HTTPS</h3>\n<p>Por motivos de segurança, HTTPS é necessário para um Service Worker se registrar no navegador e agir de acordo sobre eventos, assim torna-se possível a orquestação, fabricação e filtragem de conexões. </p>\n<h3 id=\"seo\"><a href=\"#seo\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>SEO</h3>\n<p>Qualquer aplicativo precisa ter um modelo de engajamento mais profundo para criar histórias de sucesso. É difícil manter o mesmo nível de taxa de engajamento depois que o aplicativo é baixado. Com o tempo de carregamento notavelmente mais rápido, funcionalidade de execução offline, design responsivo, estrutura segura e menor uso de dados, é muito fácil otimizar com palavras-chave necessárias para colher os benefícios de uma presença online. Para realizar testes de SEO, performance, melhores práticas e acessibilidade deve-se utilizar o Lighthouse, disponível nas opções de ferramentas do desenvolvedor.</p>\n<h2 id=\"unificação-das-experiências-web-e-mobile\"><a href=\"#unifica%C3%A7%C3%A3o-das-experi%C3%AAncias-web-e-mobile\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Unificação das experiências web e mobile</h2>\n<p>Uma diferença evidente entre aplicativos da web e aplicativos móveis comuns é sua explorabilidade. Um aplicativo comum requer pesquisa e instalação por meio de um mercado de aplicativos. Os aplicativos da web progressivos permitem o melhor de ambas abordagens, onde os usuários finais podem facilmente experimentar um\naplicativo por meio do navegador da Web e, em seguida, escolher instalá-lo por meio de um pop-up \"Adicionar à tela inicial\".</p>\n<h2 id=\"tabela-de-comparação\"><a href=\"#tabela-de-compara%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Tabela de comparação</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Aplicativo nativo</th>\n<th>Aplicativo web normal</th>\n<th>PWA</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Instalação</strong></td>\n<td>Necessário ir até AppStore ou PlayStore</td>\n<td>Instalação não necessária</td>\n<td>Apenas clicar no botão de adicionar à página inicial (apenas em Android)</td>\n</tr>\n<tr>\n<td><strong>Atualização</strong></td>\n<td>Necessário ir até a loja e submeter o download</td>\n<td>Instantâneo</td>\n<td>Instantâneo</td>\n</tr>\n<tr>\n<td><strong>Tamanho</strong></td>\n<td>Médio/Grande</td>\n<td>Pequeno e rápido</td>\n<td>Pequeno e rápido</td>\n</tr>\n<tr>\n<td><strong>Acesso Offline</strong></td>\n<td>Disponível</td>\n<td>Indisponível</td>\n<td>Necessário usar o aplicativo uma vez previamente online para conseguir acessar o cache</td>\n</tr>\n<tr>\n<td><strong>Experiência do usuário</strong></td>\n<td>Excelente quando bem projetado</td>\n<td>Confuso por causa dos menus duplos</td>\n<td>Confuso por causa dos menus duplos</td>\n</tr>\n<tr>\n<td><strong>Notificação Push</strong></td>\n<td>Disponível porém necessário trabalhar intervenção da loja de aplicativos</td>\n<td>Indisponível</td>\n<td>Disponível</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"caso-de-sucesso\"><a href=\"#caso-de-sucesso\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Caso de sucesso</h2>\n<p>O case de sucesso mais famoso dos Progressive Web Apps é o do Flipkart, que é o maior e-commerce da India. A experiência na construção do Flipkart Lite (que é a versão PWA do aplicativo) resultou em um aumento de 70% em conversões de vendas. Além disso, o Flipkart Lite teve outros números impressionantes, aumentando o tempo de permanência dos usuários em 3 vezes, 40% maior engajamento e consumo de dados quase 3 vezes menor.</p>\n<h2 id=\"desvantagens\"><a href=\"#desvantagens\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Desvantagens</h2>\n<p>Os PWAs ainda não tem o controle total sobre o hardware do device. Além disso, o uso de cache não é desenvolvido da melhor maneira pelos desenvolvedores. Outro ponto a ser destacado é que apesar de Google, Microsoft e Mozilla estarem apostando alto nos PWAs, a Apple ainda não está. Ainda existem duas features importantes não suportadas pelo Safari: push notifications e funcionamento offline.</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Conclusão</h2>\n<p>A indústria está investindo recursos em web apps (PWA) juntamente com materiais didáticos. Entretanto a falta de envolvimento acadêmico denota uma significativa lacuna de conhecimento, mas ao mesmo tempo oferece potencial de pesquisa. </p>\n<p>O estado atual dos aplicativos da web progressivos envolve a falta de certas APIs e recursos de hardware e plataforma que apenas (certos) aplicativos nativos e de plataforma cruzada podem acessar. Os recentes avanços do navegador foram forças de unificação para a experiência do aplicativo do usuário final, incluindo, mas não limitado a, aplicativos da Web instaláveis ​​e com aparência nativa por meio de PWAs.</p>\n<p>Portanto, há muito potencial para os PWAs tornar-se um unificador para o desenvolvimento nativo da web sem\no uso de frameworks multiplataforma. Como usuário final, o processo de instalação do PWA se torna mais semelhante para aplicativos regulares por meio de novos avanços nos aspectos da experiência do usuário.</p>\n<h2 id=\"referências-bibliográficas\"><a href=\"#refer%C3%AAncias-bibliogr%C3%A1ficas\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Referências Bibliográficas</h2>\n<ul>\n<li>HUME, DEAN. A BIG list of Progressive Web App tips &#x26; tricks. Personal Blog Dean Hume. Disponível em:<a href=\"https://deanhume.com/a-big-list-of-progressive-web-app-tips/\" target=\"_blank\" rel=\"noopener\">https://deanhume.com/a-big-list-of-progressive-web-app-tips/</a> Acesso em 02 ago. 2020.</li>\n<li>Biørn-Hansen, Andreas &#x26; Majchrzak, Tim A. &#x26; Grønli, Tor-Morten. (2017). Progressive Web Apps: The Possible Web-native Unifier for Mobile Development. 344-351. 10.5220/0006353703440351. </li>\n<li>Tandel, Sayali &#x26; Jamadar, Abhishek. (2018). Impact of Progressive Web Apps on Web App Development. 10.15680/IJIRSET.2018.0709021.</li>\n</ul>\n"}},"context":{}}